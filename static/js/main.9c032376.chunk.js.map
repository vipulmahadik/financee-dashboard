{"version":3,"sources":["components/Navigation.js","components/Secondary.js","components/Primary.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","style","background","zIndex","type","icon","fa","Component","Secondary","Primary","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAwCeA,E,iLAlCX,OACE,yBAAKC,UAAU,mEAAmEC,MAAQ,CAACC,WAAY,QAASC,OAAQ,IACtH,yBAAKH,UAAU,qCACb,4BAAQI,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,QAG3B,yBAAKN,UAAU,oEACb,4BAAQI,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,4BAAQF,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,4BAAQF,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,4BAAQF,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,OAEzB,4BAAQF,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,QAG3B,yBAAKN,UAAU,qCACb,4BAAQI,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,a,GA5BVC,aC0BVC,E,iLAxBX,OACE,yBAAKR,UAAU,yCAAyCC,MAAO,CAACC,WAAY,YAC1E,yBAAKF,UAAU,OACb,yBAAKA,UAAU,gDACb,wBAAIA,UAAU,SAAd,iBAGJ,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,UAAf,iBAIF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kCACb,4BAAQI,KAAK,SAASJ,UAAU,sBAC9B,kBAAC,IAAD,CAAiBK,KAAMC,MADzB,0B,GAhBYC,aCmBTE,E,iLAjBX,OACE,yBAAKT,UAAU,0CACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBAAf,gBAIF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,UAAf,sB,GAVYO,aCmBPG,E,iLAdX,OACE,yBAAKV,UAAU,OACb,kBAACW,EAAA,EAAD,CAAWC,OAAO,EAAMZ,UAAU,SAChC,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GARMO,aCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c032376.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fa from '@fortawesome/free-solid-svg-icons'\n\nclass Navigation extends Component {\n  render() {\n    return (\n      <div className=\"col-1 h-100 d-flex flex-column justify-content-between shadow-it\" style={ {background: 'white', zIndex: 1} }>\n        <div className=\"row d-flex justify-content-center\">\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faCreditCard} />\n          </button>\n        </div>\n        <div className=\"row d-flex flex-column justify-content-center align-items-center\">\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faCreditCard} />\n          </button>\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faFile} />\n          </button>\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faPiggyBank} />\n          </button>\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faFolder} />\n          </button>\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faArrowLeft} />\n          </button>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          <button type=\"button\" className=\"my-2 btn btn-light\">\n            <FontAwesomeIcon icon={fa.faCreditCard} />\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Navigation;","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as fa from '@fortawesome/free-solid-svg-icons'\n\nclass Secondary extends Component {\n  render() {\n    return (\n      <div className=\"col-3 d-flex flex-column no-overflow-y\" style={{background: '#f6f8fc'}}>\n        <div className=\"row\">\n          <div className=\"col-12 header-area d-flex align-items-center\">\n            <h2 className=\"title\">Header Area</h2>\n          </div>\n        </div>\n        <div className=\"row flex-grow-1\">\n          <div className=\"col-12\">\n            Content Area\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 text-center footer-area\">\n            <button type=\"button\" className=\"my-2 btn btn-light\">\n              <FontAwesomeIcon icon={fa.faPlusCircle} /> Add a new card\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Secondary","import React, {Component} from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import * as fa from '@fortawesome/free-solid-svg-icons'\n\nclass Primary extends Component {\n  render() {\n    return (\n      <div className=\"col-8 d-flex flex-column no-overflow-y\">\n        <div className=\"row\">\n          <div className=\"col-12 header-area\">\n            Header Area\n          </div>\n        </div>\n        <div className=\"row flex-grow-1\">\n          <div className=\"col-12\">\n            Content Area\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Primary","import React, {Component} from 'react';\nimport Container from 'react-bootstrap/Container'\nimport './App.css';\nimport Navigation from './components/Navigation'\nimport Secondary from './components/Secondary'\nimport Primary from './components/Primary'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid={true} className=\"h-100\">\n          <div className=\"row h-100\">\n            <Navigation />\n            <Secondary />\n            <Primary />\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}